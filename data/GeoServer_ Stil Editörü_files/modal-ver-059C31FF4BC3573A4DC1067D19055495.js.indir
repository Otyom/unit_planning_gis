

;(function (undefined) {
'use strict';

if (typeof(Wicket) === "undefined") {
window.Wicket = {};
}
if (!Wicket.Class) {
Wicket.Class = {
create: function() {
return function() {
this.initialize.apply(this, arguments);
};
}
};
}
if (!Wicket.Object) {
Wicket.Object = { };
}
if (!Wicket.Object.extend) {
Wicket.Object.extend = function(destination, source) {
for (var property in source) {
destination[property] = source[property];
}
return destination;
};
}

Wicket.Iframe = {

findPosX: function(e) {
if (e.offsetParent) {
var c = 0;
while (e) {
c += e.offsetLeft;
e = e.offsetParent;
}
return c;
} else if (e.x) {
return e.x;
} else {
return 0;
}
},

findPosY: function(e) {
if (e.offsetParent) {
var c = 0;
while (e) {
c += e.offsetTop;
e = e.offsetParent;
}
return c;
} else if (e.y) {
return e.y;
} else {
return 0;
}
},

forwardEvents: function(doc, iframe, revertList) {
try {
var idoc = iframe.contentWindow.document;
idoc.old_onmousemove = idoc.onmousemove;
idoc.onmousemove = function(evt) {
if (!evt) {
evt = iframe.contentWindow.event;
}
var e = {};
var dx = 0;
var dy = 0;
if (Wicket.Browser.isIELessThan11() || Wicket.Browser.isGecko()) {
dx = Wicket.Window.getScrollX();
dy = Wicket.Window.getScrollY();
}
e.clientX = evt.clientX + Wicket.Iframe.findPosX(iframe) - dx;
e.clientY = evt.clientY + Wicket.Iframe.findPosY(iframe) - dy;
doc.onmousemove(e);
};
idoc.old_onmouseup = idoc.old_onmousemove;
idoc.onmouseup = function(evt) {
if (!evt) {
evt = iframe.contentWindow.event;
}
var e = {};
var dx = 0;
var dy = 0;
if (Wicket.Browser.isIELessThan11() || Wicket.Browser.isGecko()) {
dx = Wicket.Window.getScrollX();
dy = Wicket.Window.getScrollY();
}
e.clientX = evt.clientX + Wicket.Iframe.findPosX(iframe) - dx;
e.clientY = evt.clientY + Wicket.Iframe.findPosY(iframe) - dy;
doc.onmouseup(e);
};
revertList.push(iframe);
Wicket.Iframe.documentFix(idoc, revertList);
} catch (ignore) {
}
},

revertForward: function(iframe) {
var idoc = iframe.contentWindow.document;
idoc.onmousemove = idoc.old_onmousemove;
idoc.onmouseup = idoc.old_onmouseup;
idoc.old_onmousemove = null;
idoc.old_onmouseup = null;
},

documentFix: function(doc, revertList) {
var iframes = doc.getElementsByTagName("iframe");
for (var i = 0; i < iframes.length; ++i) {
var iframe = iframes[i];
if (iframe.tagName) {
Wicket.Iframe.forwardEvents(doc, iframe, revertList);
}
}
},

documentRevert: function(revertList) {
for (var i = 0; i < revertList.length; ++i) {
var iframe = revertList[i];
Wicket.Iframe.revertForward(iframe);
}
}
};

Wicket.Window = Wicket.Class.create();

Wicket.Window.create = function(settings) {
var Win;

 if (typeof(settings.src) !== "undefined" && Wicket.Browser.isKHTML() === false) {

 try {
Win = window.parent.Wicket.Window;
} catch (ignore) {}
}

 if (typeof(Win) === "undefined") {
Win = Wicket.Window;
}

 return new Win(settings);
};

Wicket.Window.get = function() {
var win = null;
if (typeof(Wicket.Window.current) !== "undefined") {
win = Wicket.Window.current;
} else {
try {
win = window.parent.Wicket.Window.current;
} catch (ignore) {}
}
return win;
};

Wicket.Window.close = function() {
var win;
try {
win = window.parent.Wicket.Window;
} catch (ignore) {}
if (win && win.current) {

 
 window.parent.setTimeout(function() {
win.current.close();
}, 0);
}
};
Wicket.Window.prototype = {

initialize: function(settings) {

 this.settings = Wicket.Object.extend({
minWidth: 200, 
minHeight: 150, 
className: "w_blue", 
width: 600, 
height: 300, 
resizable: true,
widthUnit: "px", 
heightUnit: "px", 
src: null, 
element: null, 
iframeName: null, 
cookieId: null, 
title: null, 
onCloseButton: Wicket.bind(function() {

this.caption.getElementsByTagName("a")[0].focus();
this.caption.getElementsByTagName("a")[0].blur();
this.close();
return false;
}, this), 
onClose: function() { }, 
mask: "semi-transparent", 
unloadConfirmation : true 
}, settings || { });
},

isIframe: function() {
return this.settings.src != null;
},

createDOM: function() {
var idWindow = this.newId();
var idClassElement = this.newId();
var idCaption = this.newId();
var idFrame = this.newId();
var idTop = this.newId();
var idTopLeft = this.newId();
var idTopRight = this.newId();
var idLeft = this.newId();
var idRight = this.newId();
var idBottomLeft = this.newId();
var idBottomRight = this.newId();
var idBottom = this.newId();
var idCaptionText = this.newId();
var markup = Wicket.Window.getMarkup(idWindow, idClassElement, idCaption, idFrame,
idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight,
idBottom, idCaptionText, this.isIframe());
var element = document.createElement("div");
element.id = idWindow;
document.body.appendChild(element);
Wicket.DOM.replace(element, markup);
var _ = function(name) { return document.getElementById(name); };
this.window = _(idWindow);
this.classElement = _(idClassElement);
this.caption = _(idCaption);
this.content = _(idFrame);
this.top = _(idTop);
this.topLeft = _(idTopLeft);
this.topRight = _(idTopRight);
this.left = _(idLeft);
this.right = _(idRight);
this.bottomLeft = _(idBottomLeft);
this.bottomRight = _(idBottomRight);
this.bottom = _(idBottom);
this.captionText = _(idCaptionText);
if (Wicket.Browser.isIELessThan11()) {

 if (Wicket.Browser.isIEQuirks()) {
this.topLeft.style.marginRight = "-3px";
this.topRight.style.marginLeft = "-3px";
this.bottomLeft.style.marginRight = "-3px";
this.bottomRight.style.marginLeft = "-3px";
}
}

 
 
 if (Wicket.Browser.isIELessThan11() || Wicket.Browser.isGecko()) {
this.window.style.position = "absolute";
}

 if (this.settings.resizable === false) {
this.top.style.cursor = this.topLeft.style.cursor = this.topRight.style.cursor =
this.bottom.style.cursor = this.bottomLeft.style.cursor = this.bottomRight.style.cursor =
this.left.style.cursor = this.right.style.cursor = "default";
}
},

newId: function() {
return "_wicket_window_" + Wicket.Window.idCounter++;
},

bind: function(element, handler) {
Wicket.Drag.init(element, Wicket.bind(this.onBegin, this), Wicket.bind(this.onEnd, this), Wicket.bind(handler, this));
},

unbind: function(element) {
Wicket.Drag.clean(element);
},

bindInit: function() {
this.bind(this.caption, this.onMove);
if (this.settings.resizable) {
this.bind(this.bottomRight, this.onResizeBottomRight);
this.bind(this.bottomLeft, this.onResizeBottomLeft);
this.bind(this.bottom, this.onResizeBottom);
this.bind(this.left, this.onResizeLeft);
this.bind(this.right, this.onResizeRight);
this.bind(this.topLeft, this.onResizeTopLeft);
this.bind(this.topRight, this.onResizeTopRight);
this.bind(this.top, this.onResizeTop);
} else {
this.bind(this.bottomRight, this.onMove);
this.bind(this.bottomLeft, this.onMove);
this.bind(this.bottom, this.onMove);
this.bind(this.left, this.onMove);
this.bind(this.right, this.onMove);
this.bind(this.topLeft, this.onMove);
this.bind(this.topRight, this.onMove);
this.bind(this.top, this.onMove);
}
this.caption.getElementsByTagName("a")[0].onclick = Wicket.bind(this.settings.onCloseButton, this);
},

bindClean: function() {
this.unbind(this.caption);
this.unbind(this.bottomRight);
this.unbind(this.bottomLeft);
this.unbind(this.bottom);
this.unbind(this.left);
this.unbind(this.right);
this.unbind(this.topLeft);
this.unbind(this.topRight);
this.unbind(this.top);
this.caption.getElementsByTagName("a")[0].onclick = null;
},

getContentDocument: function() {
if (this.isIframe() === true) {
return this.content.contentWindow.document;
} else {
return document;
}
},

center: function() {
var scTop = 0;
var scLeft = 0;
if (Wicket.Browser.isIELessThan11() || Wicket.Browser.isGecko()) {
scLeft = Wicket.Window.getScrollX();
scTop = Wicket.Window.getScrollY();
}
var width = Wicket.Window.getViewportWidth();
var height = Wicket.Window.getViewportHeight();
var modalWidth = this.window.offsetWidth;
var modalHeight = this.window.offsetHeight;
if (modalWidth > width - 10) {
this.window.style.width = (width - 10) + "px";
modalWidth = this.window.offsetWidth;
}
if (modalHeight > height - 40) {
this.content.style.height = (height - 40) + "px";
modalHeight = this.window.offsetHeight;
}
var left = (width / 2) - (modalWidth / 2) + scLeft;
var top = (height / 2) - (modalHeight / 2) + scTop;
if (left < 0) {
left = 0;
}
if (top < 0) {
top = 0;
}
this.window.style.left = left + "px";
this.window.style.top = top + "px";
},
cookieKey: "wicket-modal-window-positions",
cookieExp: 31,
findPositionString: function(remove) {
var cookie = Wicket.Cookie.get(this.cookieKey);
var entries = cookie != null ? cookie.split("|") : [];
for (var i = 0; i < entries.length; ++i) {
if (entries[i].indexOf(this.settings.cookieId + "::") === 0) {
var string = entries[i];
if (remove) {
entries.splice(i, 1);
Wicket.Cookie.set(this.cookieKey, entries.join("|"), this.cookieExp);
}
return string;
}
}
return null;
},

savePosition: function() {
this.savePositionAs(this.window.style.left, this.window.style.top, this.window.style.width, this.content.style.height);
},
savePositionAs: function(x, y, width, height) {
if (this.settings.cookieId) {
this.findPositionString(true);





 var cookie = this.settings.cookieId;
cookie += "::";
cookie += x + ",";
cookie += y + ",";
cookie += width + ",";
cookie += height;
var rest = Wicket.Cookie.get(this.cookieKey);
if (rest != null) {
cookie += "|" + rest;
}
Wicket.Cookie.set(this.cookieKey, cookie, this.cookieExp);
}
},

loadPosition: function() {
if (this.settings.cookieId) {
var string = this.findPositionString(false);
if (string != null) {
var array = string.split("::");
var positions = array[1].split(",");
if (positions.length === 4) {
this.window.style.left = positions[0];
this.window.style.top = positions[1];
this.window.style.width = positions[2];
this.content.style.height = positions[3];
}
}
}
},

createMask: function() {
if (this.settings.mask === "transparent") {
this.mask = new Wicket.Window.Mask(true);
} else if (this.settings.mask === "semi-transparent") {
this.mask = new Wicket.Window.Mask(false);
}
if (typeof(this.mask) !== "undefined") {
this.mask.show();
}
},

destroyMask: function() {
this.mask.hide();
this.mask = null;
},

load: function() {
if (!this.settings.title) {
this.update = window.setInterval(Wicket.bind(this.updateTitle, this), 100);
}

 if (Wicket.Browser.isOpera()) {
this.content.onload = Wicket.bind(function() {
this.content.contentWindow.name = this.settings.iframeName;
}, this);
} else {
this.content.contentWindow.name = this.settings.iframeName;
}
try
{
this.content.contentWindow.location.replace(this.settings.src);
}
catch(ignore)
{
this.content.src = this.settings.src;
}
},

show: function() {

 this.createDOM();

 this.classElement.className = this.settings.className;

 if (this.isIframe()) {

 this.load();
} else {



 if (this.settings.element == null) {
throw "Either src or element must be set.";
}

 this.oldParent = this.settings.element.parentNode;
this.settings.element.parentNode.removeChild(this.settings.element);
this.content.appendChild(this.settings.element);

 this.content.style.overflow="auto";
}

 this.bindInit();

 if (this.settings.title != null) {
this.captionText.innerHTML = this.settings.title;

 this.window.setAttribute('aria-labelledBy', this.settings.title);
}

 this.window.style.width = this.settings.width + (this.settings.resizable ? "px" : this.settings.widthUnit);
if (this.settings.height) {
this.content.style.height = this.settings.height + (this.settings.resizable ? "px" : this.settings.heightUnit);
}

 if (this.settings.autoSize) {
this.autoSizeWindow();
}

 this.center();

 this.loadPosition();
var doShow = Wicket.bind(function() {
this.adjustOpenWindowZIndexesOnShow();
this.window.style.visibility="visible";
}, this);
this.adjustOpenWindowsStatusOnShow();

 if (false && Wicket.Browser.isGecko() && this.isIframe()) {

 
 
 window.setTimeout(function() { doShow(); }, 0);
} else {
doShow();
}

 
 if (this.content.focus) {
this.content.focus();
this.content.blur();
}

 this.old_onunload = window.onunload;

 window.onunload = Wicket.bind(function() {
this.close(true);
if (this.old_onunload) {
return this.old_onunload();
}
}, this);
if (this.settings.unloadConfirmation) {
Wicket.Event.add(window, 'beforeunload',this.onbeforeunload);
}

 this.createMask();
},
onbeforeunload: function() {
return "Reloading this page will cause the modal window to disappear.";
},
adjustOpenWindowZIndexesOnShow: function() {

 if (this.oldWindow) {

 this.oldWindow.window.style.zIndex = Wicket.Window.Mask.zIndex - 1;
}
},
adjustOpenWindowsStatusOnShow: function() {

 if (Wicket.Window.current) {

 this.oldWindow = Wicket.Window.current;
}

 Wicket.Window.current = this;
},

canClose: function() {
return true;
},

canCloseInternal: function() {
try {
if (this.isIframe() === true) {
var current = this.content.contentWindow.Wicket.Window.current;
if (current) {
window.alert('You can\'t close this modal window. Close the top-level modal window first.');
return false;
}
}
} catch (ignore) {}
return true;
},

close: function(force) {

 if (force !== true && (!this.canClose() || !this.canCloseInternal())) {
return;
}

 if (typeof(this.update) !== "undefined") {
window.clearInterval(this.update);
}

 this.bindClean();

 this.window.style.display = "none";

 if (typeof(this.oldParent) !== "undefined") {
try {
this.content.removeChild(this.settings.element);
this.oldParent.appendChild(this.settings.element);
this.oldParent = null;
} catch (ignore) {}
}

 this.window.parentNode.removeChild(this.window);

 this.window = this.classElement = this.caption = this.bottomLeft = this.bottomRight = this.bottom =
this.left = this.right = this.topLeft = this.topRight = this.top = this.captionText = null;

 window.onunload = this.old_onunload;
this.old_onunload = null;
Wicket.Event.remove(window, 'beforeunload',this.onbeforeunload);

 this.destroyMask();
if (force !== true) {

 this.settings.onClose();
}
this.adjustOpenWindowsStatusAndZIndexesOnClose();
if (Wicket.Browser.isIELessThan11()) {

 
 var e = document.createElement("input");
var x = Wicket.Window.getScrollX();
var y = Wicket.Window.getScrollY();
e.style.position = "absolute";
e.style.left = x + "px";
e.style.top = y + "px";
document.body.appendChild(e);
e.focus();
document.body.removeChild(e);
}
},
adjustOpenWindowsStatusAndZIndexesOnClose: function() {

 if (this.oldWindow != null) {

 Wicket.Window.current = this.oldWindow;

 Wicket.Window.current.window.style.zIndex = Wicket.Window.Mask.zIndex + 1;
this.oldWindow = null;
} else {

 Wicket.Window.current = null;
}
},

destroy: function() {
this.settings = null;
},

updateTitle: function() {
try {
if (this.content.contentWindow.document.title) {
if (this.captionText.innerHTML !== this.content.contentWindow.document.title) {
this.captionText.innerHTML = this.content.contentWindow.document.title;

 this.window.setAttribute('aria-labelledBy', this.content.contentWindow.document.title);

 if (Wicket.Browser.isKHTML()) {
this.captionText.style.display = 'none';
window.setTimeout(Wicket.bind(function() { this.captionText.style.display="block";}, this), 0);
}
}
}
} catch (ignore) {
Wicket.Log.info(ignore);
}
},

onBegin: function(object) {
if (this.isIframe() && (Wicket.Browser.isGecko() || Wicket.Browser.isIELessThan11() || Wicket.Browser.isSafari())) {
this.revertList = [];
Wicket.Iframe.documentFix(document, this.revertList);
}
},

onEnd: function(object) {
if (this.revertList) {
Wicket.Iframe.documentRevert(this.revertList);
this.revertList = null;
if (Wicket.Browser.isKHTML() || this.content.style.visibility==='hidden') {
this.content.style.visibility='hidden';
window.setTimeout(Wicket.bind(function() { this.content.style.visibility='visible'; }, this), 0 );
}
this.revertList = null;
}
this.savePosition();
},

onMove: function(object, deltaX, deltaY) {
var w = this.window;
this.left_ = parseInt(w.style.left, 10) + deltaX;
this.top_ = parseInt(w.style.top, 10) + deltaY;
if (this.left_ < 0) {
this.left_ = 0;
}
if (this.top_ < 0) {
this.top_ = 0;
}
w.style.left = this.left_ + "px";
w.style.top = this.top_ + "px";
this.moving();
},

moving: function() {
},

resizing: function() {
},

clipSize : function(swapX, swapY) {
this.res = [0, 0];
if (this.width < this.settings.minWidth) {
this.left_ -= this.settings.minWidth - this.width;
this.res[0] = this.settings.minWidth - this.width;
this.width = this.settings.minWidth;
}
if (this.height < this.settings.minHeight) {
this.top_ -= this.settings.minHeight - this.height;
this.res[1] = this.settings.minHeight - this.height;
this.height = this.settings.minHeight;
}
if (swapX === true) {
this.res[0] = -this.res[0];
}
if (swapY === true) {
this.res[1] = -this.res[1];
}
},

 
 

onResizeBottomRight: function(object, deltaX, deltaY) {
var w = this.window;
var f = this.content;
this.width = parseInt(w.style.width, 10) + deltaX;
this.height = parseInt(f.style.height, 10) + deltaY;
this.clipSize();
w.style.width = this.width + "px";
f.style.height = this.height + "px";
this.moving();
this.resizing();
return this.res;
},
onResizeBottomLeft: function(object, deltaX, deltaY) {
var w = this.window;
var f = this.content;
this.width = parseInt(w.style.width, 10) - deltaX;
this.height = parseInt(f.style.height, 10) + deltaY;
this.left_ = parseInt(w.style.left, 10) + deltaX;
this.clipSize(true);
w.style.width = this.width + "px";
w.style.left = this.left_ + "px";
f.style.height = this.height + "px";
this.moving();
this.resizing();
return this.res;
},
onResizeBottom: function(object, deltaX, deltaY) {
var f = this.content;
this.height = parseInt(f.style.height, 10) + deltaY;
this.clipSize();
f.style.height = this.height + "px";
this.resizing();
return this.res;
},
onResizeLeft: function(object, deltaX, deltaY) {
var w = this.window;
this.width = parseInt(w.style.width, 10) - deltaX;
this.left_ = parseInt(w.style.left, 10) + deltaX;
this.clipSize(true);
w.style.width = this.width + "px";
w.style.left = this.left_ + "px";
this.moving();
this.resizing();
return this.res;
},
onResizeRight: function(object, deltaX, deltaY) {
var w = this.window;
this.width = parseInt(w.style.width, 10) + deltaX;
this.clipSize();
w.style.width = this.width + "px";
this.resizing();
return this.res;
},
onResizeTopLeft: function(object, deltaX, deltaY) {
var w = this.window;
var f = this.content;
this.width = parseInt(w.style.width, 10) - deltaX;
this.height = parseInt(f.style.height, 10) - deltaY;
this.left_ = parseInt(w.style.left, 10) + deltaX;
this.top_ = parseInt(w.style.top, 10) + deltaY;
this.clipSize(true, true);
w.style.width = this.width + "px";
w.style.left = this.left_ + "px";
f.style.height = this.height + "px";
w.style.top = this.top_ + "px";
this.moving();
this.resizing();
return this.res;
},
onResizeTopRight: function(object, deltaX, deltaY) {
var w = this.window;
var f = this.content;
this.width = parseInt(w.style.width, 10) + deltaX;
this.height = parseInt(f.style.height, 10) - deltaY;
this.top_ = parseInt(w.style.top, 10) + deltaY;
this.clipSize(false, true);
w.style.width = this.width + "px";
f.style.height = this.height + "px";
w.style.top = this.top_ + "px";
this.moving();
this.resizing();
return this.res;
},
onResizeTop: function(object, deltaX, deltaY) {
var f = this.content;
var w = this.window;
this.height = parseInt(f.style.height, 10) - deltaY;
this.top_ = parseInt(w.style.top, 10) + deltaY;
this.clipSize(false, true);
f.style.height = this.height + "px";
w.style.top = this.top_ + "px";
this.moving();
this.resizing();
return this.res;
},

autoSizeWindow: function(){
var targetWindow = this.window;
var targetContent = this.content;
targetContent.style.height = this.settings.minHeight +'px';
targetWindow.style.width = this.settings.minWidth +'px';
targetContent.style.overflow = 'hidden';
var newHeight = targetContent.scrollHeight +'px';
var newWidth = (targetContent.scrollWidth + targetWindow.clientWidth - targetContent.clientWidth) + 'px';
targetContent.style.height = newHeight;
targetWindow.style.width = newWidth;
targetContent.style.overflow = 'auto';
}
};

Wicket.Window.idCounter = 0;

Wicket.Window.getMarkup = function(idWindow, idClassElement, idCaption, idContent, idTop, idTopLeft, idTopRight, idLeft, idRight, idBottomLeft, idBottomRight, idBottom, idCaptionText, isFrame) {
var s =
"<div class=\"wicket-modal\" id=\""+idWindow+"\" role=\"dialog\" aria-labelledBy=\""+idCaptionText+"\" style=\"top: 10px; left: 10px; width: 100px;\"><form style='background-color:transparent;padding:0px;margin:0px;border-width:0px;position:static'>"+
"<div id=\""+idClassElement+"\">"+
"<div class=\"w_top_1\">"+
"<div class=\"w_topLeft\" id=\""+idTopLeft+"\">"+
"</div>"+
"<div class=\"w_topRight\" id=\""+idTopRight+"\">"+
"</div>"+
"<div class=\"w_top\" id='"+idTop+"'>"+
"</div>"+
"</div>"+
"<div class=\"w_left\" id='"+idLeft+"'>"+
"<div class=\"w_right_1\">"+
"<div class=\"w_right\" id='"+idRight+"'>"+
"<div class=\"w_content_1\" onmousedown=\"Wicket.Event.stop(event);\">"+
"<div class=\"w_caption\"  id=\""+idCaption+"\">"+
"<a class=\"w_close\" style=\"z-index:1\" href=\"#\"></a>"+
"<h3 id=\""+idCaptionText+"\" class=\"w_captionText\"></h3>"+
"</div>"+
"<div class=\"w_content_2\">"+
"<div class=\"w_content_3\">"+
"<div class=\"w_content\">";
if (isFrame) {
s+= "<iframe frameborder=\"0\" id=\""+idContent+"\" allowtransparency=\"false\" style=\"height: 200px\" class=\"wicket_modal\"></iframe>";
} else {
s+= "<div id='"+idContent+"' class='w_content_container'></div>";
}
s+=
"</div>"+
"</div>"+
"</div>"+
"</div>"+
"</div>"+
"</div>"+
"</div>"+
"<div class=\"w_bottom_1\" id=\""+idBottom+"_1\">"+
"<div class=\"w_bottomRight\"  id=\""+idBottomRight+"\">"+
"</div>"+
"<div class=\"w_bottomLeft\" id=\""+idBottomLeft+"\">"+
"</div>"+
"<div class=\"w_bottom\" id=\""+idBottom+"\">"+
"</div>"+
"</div>"+
"</div>"+
"</form></div>";
return s;
};

Wicket.Window.Mask = Wicket.Class.create();
Wicket.Window.Mask.zIndex = 20000;
Wicket.Window.Mask.prototype = {

initialize: function(transparent) {
this.transparent = transparent;
},

show: function() {

 if (!Wicket.Window.Mask.element) {

 var e = document.createElement("div");
document.body.appendChild(e);

 if (this.transparent) {
e.className = "wicket-mask-transparent";
} else {
e.className = "wicket-mask-dark";
}
e.style.zIndex = Wicket.Window.Mask.zIndex;

 
 
 
 if (this.transparent === false) {
if (Wicket.Browser.isKHTML() === false) {
e.style.backgroundImage = "none";
} else {
e.style.backgroundColor = "transparent";
}
}

 
 
 if (Wicket.Browser.isIELessThan11() || Wicket.Browser.isGecko()) {
e.style.position = "absolute";
}

 this.element = e;

 this.old_onscroll = window.onscroll;
this.old_onresize = window.onresize;

 window.onscroll = Wicket.bind(this.onScrollResize, this);
window.onresize = Wicket.bind(this.onScrollResize, this);

 this.onScrollResize(true);

 Wicket.Window.Mask.element = e;
} else {

 this.dontHide = true;
}
this.shown=true;
this.focusDisabled=false;
this.disableCoveredContent();
},

hide: function() {

 this.cancelPendingTasks();

 if (typeof(Wicket.Window.Mask.element) !== "undefined" && typeof(this.dontHide) === "undefined") {

 document.body.removeChild(this.element);
this.element = null;

 window.onscroll = this.old_onscroll;
window.onresize = this.old_onresize;
Wicket.Window.Mask.element = null;
}
this.shown=false;
this.reenableCoveredContent();
},

 disableCoveredContent: function() {
var doc = document;
var old = Wicket.Window.current.oldWindow;
if (old) {
doc = old.getContentDocument();
}
this.doDisable(doc, Wicket.Window.current);
},
tasks: [],
startTask: function (fn, delay) {
var taskId=setTimeout(Wicket.bind(function() { fn(); this.clearTask(taskId); }, this), delay);
this.tasks.push(taskId);
},
clearTask: function (taskId) {
var index=-1;
for (var i=0;i<this.tasks.length;i++) {
if (this.tasks[i] === taskId) {
index=i;break;
}
}
if (index>=0) {
this.tasks.splice(index,1);
}
},
cancelPendingTasks: function() {
while (this.tasks.length>0) {
var taskId=this.tasks.shift();
clearTimeout(taskId);
}
},

 
 doDisable: function(doc, win) {
this.startTask(Wicket.bind(function() {this.hideSelectBoxes(doc, win);}, this), 300);
this.startTask(Wicket.bind(function() {this.disableTabs(doc, win);}, this), 400);
this.startTask(Wicket.bind(function() {this.disableFocus(doc, win);}, this), 1000);
},

 reenableCoveredContent: function() {

 this.showSelectBoxes();

 this.restoreTabs();

 this.enableFocus();
},

onScrollResize: function(dontChangePosition) {

 if (this.element.style.position === "absolute") {
var w = Wicket.Window.getViewportWidth();
var h = Wicket.Window.getViewportHeight();
var scTop = 0;
var scLeft = 0;
scLeft = Wicket.Window.getScrollX();
scTop = Wicket.Window.getScrollY();
this.element.style.top = scTop + "px";
this.element.style.left = scLeft + "px";
if (document.all) { 
 this.element.style.width = w;
}
this.element.style.height = h;
}
},

isParent: function(element, parent) {
if (element.parentNode === parent) {
return true;
}
if (typeof(element.parentNode) === "undefined" || element.parentNode === document.body) {
return false;
}
return this.isParent(element.parentNode, parent);
},

hideSelectBoxes : function(doc, win) {
if (!this.shown) {
return;
}
if (Wicket.Browser.isIELessThan11()) {
this.boxes = [];
var selects = doc.getElementsByTagName("select");
for (var i = 0; i < selects.length; i++) {
var element = selects[i];

 
 if (win.isIframe() === false && this.isParent(element, win.content)) {
continue;
}
if (element.style.visibility !== "hidden") {
element.style.visibility = "hidden";
this.boxes.push(element);
}
}
}
},

showSelectBoxes: function() {
if (typeof (this.boxes) !== "undefined") {
for (var i = 0; i < this.boxes.length; ++i) {
var element = this.boxes[i];
element.style.visibility="visible";
}
this.boxes = null;
}
},

disableFocusElement: function(element, revertList, win) {
if (win && win.window !== element) {
revertList.push([element, element.onfocus]);
element.onfocus = function() { element.blur(); };
for (var i = 0; i < element.childNodes.length; ++i) {
this.disableFocusElement(element.childNodes[i], revertList, win);
}
}
},

disableFocus: function(doc, win) {
if (!this.shown) {
return;
}

 
 if (Wicket.Browser.isIELessThan11() === false) {
this.focusRevertList = [];
var body = doc.getElementsByTagName("body")[0];
for (var i = 0; i < body.childNodes.length; ++i) {
this.disableFocusElement(body.childNodes[i], this.focusRevertList, win);
}
}
this.focusDisabled=true;
},

enableFocus: function() {
if (this.focusDisabled === false) {
return;
}
if (typeof(this.focusRevertList) !== "undefined") {
for (var i = 0; i < this.focusRevertList.length; ++i) {
var item = this.focusRevertList[i];
item[0].onfocus = item[1];
}
}
this.focusRevertList = null;
},

disableTabs: function (doc, win) {
if (!this.shown) {
return;
}
if (typeof (this.tabbableTags) === "undefined") {
this.tabbableTags = ["A", "BUTTON", "TEXTAREA", "INPUT", "IFRAME", "SELECT"];
}
if (Wicket.Browser.isIELessThan11()) {
this.disabledTabsRevertList = [];
for (var j = 0; j < this.tabbableTags.length; j++) {
var tagElements = doc.getElementsByTagName(this.tabbableTags[j]);
for (var k = 0 ; k < tagElements.length; k++) {

 
 if (win.isIframe() === true || this.isParent(tagElements[k], win.window) === false) {
var element = tagElements[k];
element.hiddenTabIndex = element.tabIndex;
element.tabIndex="-1";
this.disabledTabsRevertList.push(element);
}
}
}
}
},

restoreTabs: function() {
if (typeof (this.disabledTabsRevertList) !== "undefined" && this.disabledTabsRevertList !== null) {
for (var i = 0; i < this.disabledTabsRevertList.length; ++i) {
var element = this.disabledTabsRevertList[i];
if (typeof(element.hiddenTabIndex) !== 'undefined') {
element.tabIndex = element.hiddenTabIndex;
try {
delete element.hiddenTabIndex;
} catch (e) {
element.hiddenTabIndex = undefined;
}
}
}
this.disabledTabsRevertList = null;
}
}
};

Wicket.Window.getViewportHeight = function() {
if (typeof(window.innerHeight) !== "undefined") {
return window.innerHeight;
}
if (document.compatMode === 'CSS1Compat') {
return document.documentElement.clientHeight;
}
if (document.body) {
return document.body.clientHeight;
}
return undefined;
};

Wicket.Window.getViewportWidth = function() {
if (typeof(window.innerWidth) !== "undefined") {
return window.innerWidth;
}
if (document.compatMode === 'CSS1Compat') {
return document.documentElement.clientWidth;
}
if (document.body) {
return document.body.clientWidth;
}
return undefined;
};

Wicket.Window.getScrollX = function() {
var iebody = (document.compatMode && document.compatMode !== "BackCompat") ? document.documentElement : document.body;
return document.all? iebody.scrollLeft : window.pageXOffset;
};

Wicket.Window.getScrollY = function() {
var iebody = (document.compatMode && document.compatMode !== "BackCompat") ? document.documentElement : document.body;
return document.all? iebody.scrollTop : window.pageYOffset;
};

Wicket.Cookie = {

get: function(name) {
if (document.cookie.length > 0) {
var start = document.cookie.indexOf (name + "=");
if (start !== -1) {
start = start + name.length + 1;
var end = document.cookie.indexOf(";", start);
if (end === -1) {
end = document.cookie.length;
}
return window.unescape(document.cookie.substring(start,end));
}
} else {
return null;
}
},

set: function(name, value, expiredays) {
var exdate = new Date();
exdate.setDate(exdate.getDate() + expiredays);
document.cookie = name + "=" + window.escape(value) + ((expiredays === null) ? "" : ";expires="+exdate);
}
};
})();
